{"version":3,"sources":["assets/TicTacToe.svg","serviceWorker.ts","Components/Game/Square.tsx","Components/Game/GameLayout.tsx","Components/Game/WinnerPage.tsx","Components/Game/Game.tsx","Store/actions/game.action.ts","Store/definations/game.defination.ts","Store/actions/player.action.ts","Store/definations/player.defination.ts","Components/Landing/Landing.tsx","Components/App.tsx","Store/reducers/player.reducer.ts","utils/util.ts","Store/reducers/game.reducer.ts","Store/reducers/index.ts","Store/Store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Square","props","value","onClick","style","className","GameLayout","squares","map","square","i","key","WinnerPage","winner","player","playerNo","connect","state","board","game","turn","message","moves","draw","player1","player1Win","player2","player2Win","totalnoofgame","dispatch","userMove","pos","type","checkForWinner","resetGame","savePlayerWin","boardRef","useRef","useEffect","current","src","Logo","alt","Array","from","keys","index","savePlayerName","useState","setplayer1","setplayer2","history","useHistory","onChange","e","target","push","App","path","component","Game","Landing","initialState","produce","action","calculateWinner","combination","length","a","b","c","fill","val","winnerResult","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","reducers","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.60ee9ca1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/TicTacToe.acc667d5.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport \"./Square.scss\";\r\ninterface SquareProps {\r\n  value: string;\r\n  onClick: any;\r\n}\r\n\r\nconst Square = (props: SquareProps) => {\r\n  const { value, onClick } = props;\r\n  const style = value ? `square ${value}` : \"square\";\r\n  return (\r\n    <div className={style} onClick={onClick}>\r\n      {value}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\nimport \"./GameLayout.scss\";\r\ninterface GameLayoutProps {\r\n  squares: any[];\r\n  onClick: any;\r\n}\r\n\r\nconst GameLayout = (props: GameLayoutProps) => {\r\n  const { squares, onClick } = props;\r\n  return (\r\n    <div className=\"layout\">\r\n      {squares.map((square: any, i: number) => (\r\n        <Square key={i} value={square} onClick={() => onClick(i)} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameLayout;\r\n","import React from \"react\";\r\nimport \"./WinnerPage.scss\";\r\ninterface Props {\r\n  winner: string;\r\n  player: string;\r\n  playerNo: string;\r\n}\r\n\r\nconst WinnerPage = (props: Props) => {\r\n  const { winner, player, playerNo } = props;\r\n  return (\r\n    <div className=\"winner-page\">\r\n      <div className=\"winner-header\">Winner !</div>\r\n      <div className=\"winner-name\">\r\n        <div className=\"header\">{playerNo}</div>\r\n        <div className=\"name\">{player}</div>\r\n        <div className=\"img-holder\">{winner}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WinnerPage;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport GameLayout from \"./GameLayout\";\r\nimport Logo from \"../../assets/TicTacToe.svg\";\r\nimport \"./Game.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  userMove,\r\n  checkForWinner,\r\n  resetGame,\r\n} from \"../../Store/actions/game.action\";\r\nimport { savePlayerWin } from \"../../Store/actions/player.action\";\r\nimport WinnerPage from \"./WinnerPage\";\r\ninterface GameProps {\r\n  board: any;\r\n  turn: string;\r\n  message: string;\r\n  winner: string;\r\n  moves: number;\r\n  player1: string;\r\n  player2: string;\r\n  draw: boolean;\r\n  player1Win: number;\r\n  player2Win: number;\r\n  totalnoofgame: number;\r\n  userMove: (pos: number) => void;\r\n  gameMessage: (msg: string) => void;\r\n  checkForWinner: () => void;\r\n  resetGame: () => void;\r\n  savePlayerWin: (player: any) => void;\r\n}\r\n\r\nconst Game = (props: GameProps) => {\r\n  const {\r\n    board,\r\n    turn,\r\n    winner,\r\n    moves,\r\n    player1,\r\n    player2,\r\n    draw,\r\n    totalnoofgame,\r\n    player1Win,\r\n    player2Win,\r\n  } = props;\r\n  const boardRef = useRef([]);\r\n\r\n  const handleSquareClick = (index: number) => {\r\n    if (!board[index] && winner === null) {\r\n      props.userMove(index);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (boardRef.current !== board && moves >= 2) {\r\n      props.checkForWinner();\r\n      boardRef.current = board;\r\n    }\r\n  }, [board, moves]);\r\n\r\n  useEffect(() => {\r\n    if (winner === \"X\") {\r\n      props.savePlayerWin(\"player1Win\");\r\n    } else if (winner === \"O\") {\r\n      props.savePlayerWin(\"player2Win\");\r\n    }\r\n    if (draw) {\r\n      props.savePlayerWin([\"player1Win\", \"player2Win\"]);\r\n    }\r\n  }, [draw, winner]);\r\n\r\n  return (\r\n    <div className=\"login-layout\">\r\n      <div className=\"logo\">\r\n        <img src={Logo} alt=\"App Logo\" />\r\n      </div>\r\n      <div>\r\n        {player1Win !== 6 && player2Win !== 6 ? (\r\n          <>\r\n            <div className=\"text-holder\">\r\n              {winner === \"X\" ? (\r\n                <div className=\"winner-tag\">Winner</div>\r\n              ) : draw ? (\r\n                <div className=\"draw-tag\">Draw</div>\r\n              ) : (turn === \"O\" || turn === \"\") && winner === null ? (\r\n                <div className=\"turn-tag\">Your Turn</div>\r\n              ) : null}\r\n            </div>\r\n            <div className={`player-name ${winner === \"X\" ? \"winner\" : \"\"}`}>\r\n              <div className=\"header\">PLAYER 1</div>\r\n              <div className=\"name\">{player1}</div>\r\n              <div className=\"img-holder\">X</div>\r\n            </div>\r\n            <div className=\"dot-container\">\r\n              {Array.from(Array(totalnoofgame).keys()).map((i: number) => (\r\n                <span\r\n                  className={`dot ${\r\n                    i <= player1Win - 1 && player1Win !== 0 ? \"active\" : \"\"\r\n                  }`}\r\n                ></span>\r\n              ))}\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </div>\r\n      <div className=\"login-holder\">\r\n        <div className=\"login-card\">\r\n          {player1Win !== 6 && player2Win !== 6 ? (\r\n            <GameLayout squares={board} onClick={handleSquareClick} />\r\n          ) : player1Win === 6 ? (\r\n            <WinnerPage winner=\"X\" player={player1} playerNo=\"player 1\" />\r\n          ) : player1Win === 6 ? (\r\n            <WinnerPage winner=\"O\" player={player2} playerNo=\"player 2\" />\r\n          ) : null}\r\n        </div>\r\n        <div className=\"btn-holder\">\r\n          {player1Win !== 6 && player2Win !== 6 && (winner !== null || draw) ? (\r\n            <button className=\"btn-nxt\" onClick={props.resetGame}>\r\n              Next Match\r\n            </button>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        {player1Win !== 6 && player2Win !== 6 ? (\r\n          <>\r\n            <div className=\"text-holder\">\r\n              {winner === \"O\" ? (\r\n                <div className=\"winner-tag\">Winner</div>\r\n              ) : draw ? (\r\n                <div className=\"draw-tag\">Draw</div>\r\n              ) : turn === \"X\" && winner === null ? (\r\n                <div className=\"turn-tag\">Your Turn</div>\r\n              ) : null}\r\n            </div>\r\n            <div className=\"player-name\">\r\n              <div className=\"header\">PLAYER 2</div>\r\n              <div className=\"name\">{player2}</div>\r\n              <div className=\"img-holder\">O</div>\r\n            </div>\r\n            <div className=\"dot-container\">\r\n              {Array.from(Array(totalnoofgame).keys()).map((i: number) => (\r\n                <span\r\n                  className={`dot ${\r\n                    i <= player2Win - 1 && player2Win !== 0 ? \"active\" : \"\"\r\n                  }`}\r\n                ></span>\r\n              ))}\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state: any) => ({\r\n  board: state.game.board,\r\n  turn: state.game.turn,\r\n  message: state.game.message,\r\n  winner: state.game.winner,\r\n  moves: state.game.moves,\r\n  draw: state.game.draw,\r\n  player1: state.player.player1,\r\n  player1Win: state.player.player1Win,\r\n  player2: state.player.player2,\r\n  player2Win: state.player.player2Win,\r\n  totalnoofgame: state.player.totalnoofgame,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  userMove: (pos: number) => dispatch(userMove(pos)),\r\n  checkForWinner: () => dispatch(checkForWinner()),\r\n  resetGame: () => dispatch(resetGame()),\r\n  savePlayerWin: (player: any) => dispatch(savePlayerWin(player)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\r\n","import * as actionTypes from \"../definations\";\r\n\r\nexport const userMove = (pos: number) => {\r\n  return {\r\n    type: actionTypes.USER_MOVE,\r\n    pos,\r\n  };\r\n};\r\n\r\nexport const checkForWinner = () => {\r\n  return {\r\n    type: actionTypes.CHECK_FOR_WINNER,\r\n  };\r\n};\r\n\r\nexport const resetGame = () => {\r\n  return {\r\n    type: actionTypes.RESET_GAME,\r\n  };\r\n};\r\n","export const USER_MOVE = \"USER_MOVE\";\r\nexport const GAME_MESSAGE = \"GAME_MESSAGE\";\r\nexport const CHECK_FOR_WINNER = \"CHECK_FOR_WINNER\";\r\nexport const RESET_GAME = \"RESET_GAME\";\r\n","import * as actionTypes from \"../definations/player.defination\";\r\nexport const savePlayerName = (player1: string, player2: string) => {\r\n  return {\r\n    type: actionTypes.SAVE_PLAYER_NAME,\r\n    player1,\r\n    player2,\r\n  };\r\n};\r\n\r\nexport const savePlayerWin = (player: any) => {\r\n  return {\r\n    type: actionTypes.ADD_PLAYER_WIN,\r\n    player,\r\n  };\r\n};\r\n","export const SAVE_PLAYER_NAME = \"SAVE_PLAYER_NAME\";\r\nexport const ADD_PLAYER_WIN = \"ADD_PLAYER_WIN\";\r\n","import React, { useState } from \"react\";\r\nimport \"./Landing.scss\";\r\nimport Logo from \"../../assets/TicTacToe.svg\";\r\nimport { connect } from \"react-redux\";\r\nimport { savePlayerName } from \"../../Store/actions/player.action\";\r\nimport { useHistory } from \"react-router-dom\";\r\ninterface LandingProps {\r\n  savePlayerName: (name1: string, name2: string) => void;\r\n}\r\nconst Landing = (props: LandingProps) => {\r\n  const [player1, setplayer1] = useState(\"\");\r\n  const [player2, setplayer2] = useState(\"\");\r\n\r\n  // Local History\r\n  const history = useHistory();\r\n  return (\r\n    <div className=\"login-layout\">\r\n      <div className=\"logo\">\r\n        <img src={Logo} alt=\"App Logo\" />\r\n      </div>\r\n      <div className=\"login-holder\">\r\n        <div className=\"login-card\">\r\n          <div className=\"login-header\">\r\n            <div className=\"header-text\">Welcome to</div>{\" \"}\r\n            <div className=\"highlight\">TIC TAC TOE</div>\r\n          </div>\r\n          <div className=\"player-content\">\r\n            <div className=\"formgroup\">\r\n              <div className=\"label\">PLAYER 1</div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-p\"\r\n                value={player1}\r\n                onChange={(e) => setplayer1(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"formgroup\">\r\n              <div className=\"label\">PLAYER 2</div>\r\n              <input\r\n                type=\"text\"\r\n                className=\"input-p\"\r\n                value={player2}\r\n                onChange={(e) => setplayer2(e.target.value)}\r\n              />\r\n            </div>\r\n            <button\r\n              className=\"btn-sub\"\r\n              onClick={() => {\r\n                props.savePlayerName(player1, player2);\r\n                history.push(\"/game\");\r\n              }}\r\n            >\r\n              Continue\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  savePlayerName: (player1: string, player2: string) =>\r\n    dispatch(savePlayerName(player1, player2)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Landing);\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./App.scss\";\r\nimport Game from \"./Game/Game\";\r\nimport Landing from \"./Landing/Landing\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/game\" component={Game} />\r\n        <Route path=\"/\" component={Landing} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import * as actionTypes from \"../definations\";\r\nimport { Player } from \"../model/player.model\";\r\nimport { produce } from \"immer\";\r\nconst initialState: Player = {\r\n  player1: \"\",\r\n  player2: \"\",\r\n  player1Win: 0,\r\n  player2Win: 0,\r\n  totalnoofgame: 6,\r\n};\r\n\r\nconst player = produce((state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case actionTypes.SAVE_PLAYER_NAME:\r\n      state.player1 = action.player1;\r\n      state.player2 = action.player2;\r\n      return state;\r\n    case actionTypes.ADD_PLAYER_WIN:\r\n      if (typeof action.player === \"string\") {\r\n        state[action.player] = state[action.player] + 1;\r\n      } else {\r\n        state[action.player[0]] = state[action.player[0]] + 1;\r\n        state[action.player[1]] = state[action.player[1]] + 1;\r\n      }\r\n      return state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n});\r\nexport default player;\r\n","export const calculateWinner = (squares: any) => {\r\n  const combination = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < combination.length; i++) {\r\n    const [a, b, c] = combination[i];\r\n    if (\r\n      squares &&\r\n      squares[a] &&\r\n      squares[a] === squares[b] &&\r\n      squares[a] === squares[c]\r\n    ) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n","import { GameModel } from \"../model/game.model\";\r\nimport * as ActionTypes from \"../definations\";\r\nimport { produce } from \"immer\";\r\nimport { calculateWinner } from \"../../utils/util\";\r\n\r\nconst initialState: GameModel = {\r\n  board: Array(9).fill(null),\r\n  turn: \"\",\r\n  message: \"\",\r\n  winner: null,\r\n  moves: 0,\r\n  history: [],\r\n  draw: false,\r\n};\r\n\r\nconst game = produce((state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case ActionTypes.USER_MOVE:\r\n      let turn = { ...state.turn };\r\n      const board = state.board.map((val: any, i: any) => {\r\n        turn = state.turn === \"O\" || state.turn === \"\" ? \"X\" : \"O\";\r\n        if (i === action.pos) val = turn;\r\n        return val;\r\n      });\r\n      state.turn = turn;\r\n      state.board = board;\r\n      state.moves = state.moves + 1;\r\n\r\n      return state;\r\n\r\n    case ActionTypes.CHECK_FOR_WINNER: {\r\n      const winnerResult = calculateWinner(state.board);\r\n      const winner = winnerResult ? state.turn : null;\r\n\r\n      if (winner) {\r\n        state.winner = winner;\r\n\r\n        return state;\r\n      }\r\n      state.draw = state.winner === null && state.moves > 8;\r\n      return state;\r\n    }\r\n    case ActionTypes.RESET_GAME: {\r\n      state = initialState;\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n});\r\n\r\nexport default game;\r\n","import { combineReducers } from \"redux\";\r\nimport player from \"./player.reducer\";\r\nimport game from \"./game.reducer\";\r\nconst rootReducer = combineReducers({ player, game });\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n        trace: true,\r\n        traceLimit: 25,\r\n      })\r\n    : null || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware()));\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./Components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./Store/Store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}